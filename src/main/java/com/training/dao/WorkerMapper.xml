<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.training.dao.WorkerMapper">
  <resultMap id="BaseResultMap" type="com.training.domain.Worker">
    <result column="WorkerID" jdbcType="INTEGER" property="workerid" />
    <result column="WorkerName" jdbcType="VARCHAR" property="workername" />
    <result column="WorkerSex" jdbcType="VARCHAR" property="workersex" />
    <result column="WorkerIDNumber" jdbcType="DOUBLE" property="workeridnumber" />
    <result column="WorkerPosition" jdbcType="VARCHAR" property="workerposition" />
    <result column="WorkerWage" jdbcType="VARCHAR" property="workerwage" />
    <result column="WorkerPassword" jdbcType="VARCHAR" property="workerpassword" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    WorkerID, WorkerName, WorkerSex, WorkerIDNumber, WorkerPosition, WorkerWage, WorkerPassword
  </sql>
  <select id="selectByExample" parameterType="com.training.domain.WorkerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.training.domain.WorkerExample">
    delete from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.training.domain.Worker">
    insert into worker (WorkerID, WorkerName, WorkerSex, 
      WorkerIDNumber, WorkerPosition, WorkerWage, 
      WorkerPassword)
    values (#{workerid,jdbcType=INTEGER}, #{workername,jdbcType=VARCHAR}, #{workersex,jdbcType=VARCHAR}, 
      #{workeridnumber,jdbcType=DOUBLE}, #{workerposition,jdbcType=VARCHAR}, #{workerwage,jdbcType=VARCHAR}, 
      #{workerpassword,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.training.domain.Worker">
    insert into worker
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="workerid != null">
        WorkerID,
      </if>
      <if test="workername != null">
        WorkerName,
      </if>
      <if test="workersex != null">
        WorkerSex,
      </if>
      <if test="workeridnumber != null">
        WorkerIDNumber,
      </if>
      <if test="workerposition != null">
        WorkerPosition,
      </if>
      <if test="workerwage != null">
        WorkerWage,
      </if>
      <if test="workerpassword != null">
        WorkerPassword,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="workerid != null">
        #{workerid,jdbcType=INTEGER},
      </if>
      <if test="workername != null">
        #{workername,jdbcType=VARCHAR},
      </if>
      <if test="workersex != null">
        #{workersex,jdbcType=VARCHAR},
      </if>
      <if test="workeridnumber != null">
        #{workeridnumber,jdbcType=DOUBLE},
      </if>
      <if test="workerposition != null">
        #{workerposition,jdbcType=VARCHAR},
      </if>
      <if test="workerwage != null">
        #{workerwage,jdbcType=VARCHAR},
      </if>
      <if test="workerpassword != null">
        #{workerpassword,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.training.domain.WorkerExample" resultType="java.lang.Long">
    select count(*) from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update worker
    <set>
      <if test="record.workerid != null">
        WorkerID = #{record.workerid,jdbcType=INTEGER},
      </if>
      <if test="record.workername != null">
        WorkerName = #{record.workername,jdbcType=VARCHAR},
      </if>
      <if test="record.workersex != null">
        WorkerSex = #{record.workersex,jdbcType=VARCHAR},
      </if>
      <if test="record.workeridnumber != null">
        WorkerIDNumber = #{record.workeridnumber,jdbcType=DOUBLE},
      </if>
      <if test="record.workerposition != null">
        WorkerPosition = #{record.workerposition,jdbcType=VARCHAR},
      </if>
      <if test="record.workerwage != null">
        WorkerWage = #{record.workerwage,jdbcType=VARCHAR},
      </if>
      <if test="record.workerpassword != null">
        WorkerPassword = #{record.workerpassword,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update worker
    set WorkerID = #{record.workerid,jdbcType=INTEGER},
      WorkerName = #{record.workername,jdbcType=VARCHAR},
      WorkerSex = #{record.workersex,jdbcType=VARCHAR},
      WorkerIDNumber = #{record.workeridnumber,jdbcType=DOUBLE},
      WorkerPosition = #{record.workerposition,jdbcType=VARCHAR},
      WorkerWage = #{record.workerwage,jdbcType=VARCHAR},
      WorkerPassword = #{record.workerpassword,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>